name: Publish sdist and wheels for macos, manylinux, and windows

on:
  push:
    #tags:
    #  - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CIBW_BUILD_VERBOSITY: 3
  # Only build on Python 3.x
  CIBW_BUILD: 'cp3?-*'
  CIBW_SKIP: 'cp35-* *-manylinux_i686 *-win32'
  CIBW_BEFORE_TEST: pip install -r {project}/tests/requirement_tests.txt
  CIBW_TEST_COMMAND: pytest -s -v {project}/tests

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build wheels on Linux
        if: runner.os == 'Linux'
        env:
          CIBW_BEFORE_BUILD: 'yum update -y; yum -y install hdf5-devel'
        run: |
          python -m cibuildwheel --output-dir dist

      - name: Build wheels Mac OS
        if: runner.os == 'macOS'
        env:
          CIBW_BEFORE_BUILD: |
            brew update
            brew --version
            brew install cmake
            brew install hdf5
        run: |
          python -m cibuildwheel --output-dir dist

      - name: Build wheels Windows
        if: runner.os == 'Windows'
        shell: cmd
        # the v140 toolchain is used, so that fewer vc_redist installs are required
        # some of the information is available here:
        # https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line
        # but tracking down the 14.0 magic number (and especially newer ones isn't always easy)
        # this has a partial table:
        # https://devblogs.microsoft.com/cppblog/side-by-side-minor-version-msvc-toolsets-in-visual-studio-2017/
        run: |
          curl -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.0/bin/hdf5-1.12.0-Std-win10_64-vs16.zip
          C:\windows\system32\tar.exe xf hdf5-1.12.0-Std-win10_64-vs16.zip
          start /wait msiexec /a "%cd%\hdf\HDF5-1.12.0-win64.msi" /qn TARGETDIR="c:\hdf5\"

          python -m pip install ninja cmake
          
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat" -vcvars_ver=14.0

          set HDF5_DIR=C:\hdf5\HDF_Group\HDF5\1.12.0\cmake

          python -m cibuildwheel --output-dir dist

      - name: Store wheel as artifact
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

#  build_sdist:
#    name: Build sdist
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: 'true'
#
#      - name: Set up Python 3.6
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.6
#      - name: Build a source tarball
#        run:
#          python setup.py sdist
#      - name: Test tarball
#        run: |
#          sudo apt install -y libhdf5-dev
#          pip install -r tests/requirement_tests.txt
#          pip install dist/*
#          pytest -s -v tests
#      - name: Store sdist as artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: dist
#          path: dist
#
#  upload_wheels:
#    runs-on: ubuntu-latest
#    needs: [build_wheels, build_sdist]
#    name: Upload wheels to PyPI
#    steps:
#      - name: Download artifacts produced during the build_wheels and build_sdist jobs
#        uses: actions/download-artifact@v2
#        with:
#          name: dist
#          path: dist
#
#      - name: Display structure of downloaded files
#        run: ls -R
#        working-directory: dist
#
#      - name: Publish package to PyPI
#        uses: pypa/gh-action-pypi-publish@master
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_PASSWORD }}
#          packages_dir: dist/
